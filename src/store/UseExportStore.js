import { create } from "zustand";

export const UseExportStore = create((set, get) => ({
  // Modal state
  isOpen: false,

  // Form fields
  pdfTitle: "",
  projectName: "",
  userName: "",
  email: "",

  // Loading state
  isExporting: false,

  // Actions
  openModal: () => set({ isOpen: true }),

  closeModal: () =>
    set({
      isOpen: false,
      // Optionally reset form when closing
      // pdfTitle: '',
      // projectName: '',
      // userName: '',
      // email: ''
    }),

  // Form field setters
  setPdfTitle: (pdfTitle) => set({ pdfTitle }),
  setProjectName: (projectName) => set({ projectName }),
  setUserName: (userName) => set({ userName }),
  setEmail: (email) => set({ email }),

  // Reset form
  resetForm: () =>
    set({
      pdfTitle: "",
      projectName: "",
      userName: "",
      email: "",
    }),

  // Google Sheets integration
  sendToGoogleSheets: async (data) => {
    try {
      const webAppUrl = import.meta.env.VITE_WEB_APP_URL;
      
      const response = await fetch(webAppUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          pdfTitle: data.pdfTitle,
          projectName: data.projectName,
          userName: data.userName,
          email: data.email,
          timestamp: new Date().toISOString(),
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to send data to Google Sheets");
      }

      return await response.json();
    } catch (error) {
      console.error("Google Sheets error:", error);
      throw error;
    }
  },

  // Generate PDF function
  generatePDF: (data) => {
    return new Promise((resolve) => {
      // Create PDF content
      const pdfContent = `
Calculator Simulation Export

PDF Title: ${data.pdfTitle}
Project Name: ${data.projectName}
User Name: ${data.userName}
Email: ${data.email}
Export Date: ${new Date().toLocaleDateString("id-ID")}
Export Time: ${new Date().toLocaleTimeString("id-ID")}

---
Generated by Calculator Simulation App
      `;

      // Create blob and download
      const blob = new Blob([pdfContent], { type: "text/plain" });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${data.pdfTitle.replace(/[^a-zA-Z0-9]/g, "_")}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      // Resolve after download
      setTimeout(resolve, 1000);
    });
  },

  // Export functionality
  exportToPdf: async () => {
    const state = get();

    // Validation
    if (
      !state.pdfTitle.trim() ||
      !state.projectName.trim() ||
      !state.userName.trim() ||
      !state.email.trim()
    ) {
      alert("Please fill in all required fields");
      return;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(state.email)) {
      alert("Please enter a valid email address");
      return;
    }

    set({ isExporting: true });

    try {
      const formData = {
        pdfTitle: state.pdfTitle,
        projectName: state.projectName,
        userName: state.userName,
        email: state.email,
      };

      console.log("Exporting PDF with data:", formData);

      // Send data to Google Sheets first
      await state.sendToGoogleSheets(formData);
      console.log("Data successfully sent to Google Sheets");

      // Generate and download PDF
      await state.generatePDF(formData);
      console.log("PDF generated and downloaded successfully");

      // Success - close modal and reset form
      set({
        isOpen: false,
        isExporting: false,
      });

      alert(
        "Data berhasil disimpan ke Google Sheets dan PDF berhasil diunduh!"
      );
    } catch (error) {
      console.error("Export failed:", error);
      alert("Gagal mengekspor data. Silakan coba lagi.");
      set({ isExporting: false });
    }
  },

  // Utility function to get form data
  getFormData: () => {
    const state = get();
    return {
      pdfTitle: state.pdfTitle,
      projectName: state.projectName,
      userName: state.userName,
      email: state.email,
    };
  },

  // Utility function to set all form data at once
  setFormData: (data) =>
    set({
      pdfTitle: data.pdfTitle || "",
      projectName: data.projectName || "",
      userName: data.userName || "",
      email: data.email || "",
    }),

  // Validation helpers
  isFormValid: () => {
    const state = get();
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    return (
      state.pdfTitle.trim() !== "" &&
      state.projectName.trim() !== "" &&
      state.userName.trim() !== "" &&
      state.email.trim() !== "" &&
      emailRegex.test(state.email)
    );
  },
}));
